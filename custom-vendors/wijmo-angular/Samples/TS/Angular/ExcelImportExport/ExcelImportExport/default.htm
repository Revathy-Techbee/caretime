<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="utf-8" />
	<title>Excel Import Export</title>

	<!-- ensure IE uses the latest version of IE -->
	<meta http-equiv="X-UA-Compatible" content="IE=Edge" />
	<meta name="viewport" content="width=device-width, initial-scale=1.0" />

	<!-- jQuery/Angular/Bootstrap -->
	<script src="http://code.jquery.com/jquery-2.0.0.min.js" type="text/javascript"></script>
	<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.3.15/angular.min.js" type="text/javascript"></script>
	<script src="https://netdna.bootstrapcdn.com/bootstrap/3.3.2/js/bootstrap.min.js" type="text/javascript"></script>
	<link rel="stylesheet" type="text/css" href="https://netdna.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap.min.css" />

	<!-- SheetJS library -->
	<script src="http://cdnjs.cloudflare.com/ajax/libs/jszip/2.2.1/jszip.min.js"></script>
	<script src="scripts/c1xlsx.js"></script>

	<!-- Wijmo -->
	<script src="scripts/vendor/wijmo.min.js" type="text/javascript"></script>
	<script src="scripts/vendor/wijmo.grid.min.js" type="text/javascript"></script>
	<link href="styles/vendor/wijmo.min.css" rel="stylesheet" />
	<!-- Wijmo-Angular interop -->
	<script src="scripts/vendor/wijmo.angular.min.js" type="text/javascript"></script>

	<!-- app scripts -->
	<script src="scripts/ExcelConverter/ExcelConverter.js" type="text/javascript"></script>
	<script src="scripts/services/dataService.js" type="text/javascript"></script>
	<script src="scripts/directives/appDctv.js" type="text/javascript"></script>
	<script src="scripts/controllers/basicController.js" type="text/javascript"></script>
	<link href="styles/app.css" rel="stylesheet" />
</head>
<body ng-app="app" ng-controller="basicController">
	<div class="header">
		<div class="container">
			<h1>
				<img src="resources/wijmo5.png" alt="logo" />
				Excel Import Export
			</h1>
		</div>
	</div>
	<!-- commands -->
	<div class="container">
		<p style="margin: 30px 0;"> You can use the <a href="https://github.com/SheetJS/js-xlsx" target="_blank">xlsx.js</a> library to import Excel files into FlexGrid and to export FlexGrid to Excel files using only JavaScript with no server-side code. This sample uses a modified version of the xlsx.js library, the <b>c1xlsx.js</b> file in the scripts folder, that provides basic Excel export and import capabilities, and uses the <a target="_blank" href="https://github.com/Stuk/jszip">jszip.js</a> library to read and write Excel files.</p>
		<div class="row">
			<div class="col-md-6 col-xs-12">
				<div class="form-inline well well-lg">
					<input type="file" class="form-control" id="importFile" accept="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" />
					<button class="btn btn-default" ng-click="importExcel()">Import</button>
					<div class="checkbox">
						<label>
							<input type="checkbox" ng-model="ctx.includeColumnHeader"> Include Column Header
						</label>
					</div>
				</div>
			</div>
			<div class="col-md-6 col-xs-12">
				<div class="form-inline well well-lg">
					<a download="FlexGrid.xlsx" href="" class="btn btn-default" id="export" ng-click="exportExcel()">Export</a>
					<div class="checkbox">
						<label>
							<input type="checkbox" ng-model="ctx.includeColumnHeader"> Include Column Header
						</label>
					</div>
				</div>
			</div>
		</div>
		<!-- the flex grid -->
		<div class="row">
			<wj-flex-grid style="max-height:400px"
						  control="ctx.flexGrid"
						  items-source="ctx.data">
				<wj-flex-grid-column header="ID" binding="id"></wj-flex-grid-column>
				<wj-flex-grid-column header="Start Date" binding="start" format="d"></wj-flex-grid-column>
				<wj-flex-grid-column header="End Date" binding="end" format="d"></wj-flex-grid-column>
				<wj-flex-grid-column header="Country" binding="country"></wj-flex-grid-column>
				<wj-flex-grid-column header="Product" binding="product"></wj-flex-grid-column>
				<wj-flex-grid-column header="Color" binding="color"></wj-flex-grid-column>
				<wj-flex-grid-column header="Amount" binding="amount" format="c" aggregate="Sum"></wj-flex-grid-column>
				<wj-flex-grid-column header="Pending" binding="amount2" format="c2" aggregate="Sum"></wj-flex-grid-column>
				<wj-flex-grid-column header="Discount" binding="discount" format="p1" aggregate="Avg"></wj-flex-grid-column>
				<wj-flex-grid-column header="Active" binding="active"></wj-flex-grid-column>
			</wj-flex-grid>
		</div>
		<div class="row appCopy">
			<div class="col-md-6 col-xs-12">
				<h2>Import</h2>
				<p>The <b>import</b> function, implemented in the <b>ExcelConverter\ExcelConverter.ts</b> 
                    (or .js) file, takes an Excel file's content as input, parses it using the 
                    <b>xlsx.js</b> library, and fills the specified FlexGrid instance with the 
                    parsed data.</p>
				<p>The <b>importExcel</b> function, implemented in the <b>controllers\basicController.js</b> 
                    file, reads the selected file content from disk and passes it to the 
                    <b>ExcelConverter.import</b> function, along with the FlexGrid instance 
                    defined on the HTML page.</p>
			</div>
			<div class="col-md-6 col-xs-12">
				<app-tab>
					<app-tab-pane title="HTML">
						<div class="pane-content">
&lt;input 
  type="file" 
  class="form-control" 
  id="importFile" 
  accept=
   "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
 /&gt;
&lt;button 
  class="btn btn-default" 
  ng-click="importExcel()"&gt;Import&lt;/button&gt;
&lt;div class="checkbox"&gt;
    &lt;label&gt;
        &lt;input 
          type="checkbox" 
          ng-model="ctx.includeColumnHeader"&gt; 
            Include Column Header
    &lt;/label&gt;
&lt;/div&gt;
						</div>
					</app-tab-pane>
					<app-tab-pane title="JS">
						<div class="pane-content">
$scope.importExcel = function () {
    if ($scope.ctx.flexGrid) {
        var reader = new FileReader(),
            fileData;

        reader.onload = function(e){
            wijmo.grid.ExcelConverter.import(
                reader.result, 
                $scope.ctx.flexGrid, 
                { includeColumnHeader: $scope.ctx.includeColumnHeader }
            );
        };
        if ($('#importFile')[0].files[0]) {
            reader.readAsArrayBuffer($('#importFile')[0].files[0]);
        }
    }
}
						</div>
					</app-tab-pane>
				</app-tab>
			</div>
		</div>
		<div class="row appCopy">
			<div class="col-md-6 col-xs-12">
				<h2>Export</h2>
				<p>The <b>export</b> function, implemented in the <b>ExcelConverter</b> file, 
                    takes a FlexGrid instance as input, converts its data and formatting 
                    to Excel format using the <b>xlsx.js</b> library, and returns an object 
                    containing content for the Excel file. </p>
                <p>The <b>exportExcel</b> function, implemented in the
                    <b>controllers\basicController.js</b> file, takes this object and saves 
                    it to a file on the local disk.</p>
			</div>
			<div class="col-md-6 col-xs-12">
				<app-tab>
					<app-tab-pane title="HTML">
						<div class="pane-content">
&lt;a 
    download="FlexGrid.xlsx" 
    href="" 
    class="btn btn-default" 
    id="export" 
    ng-click="exportExcel()"&gt;
    Export&lt;/a&gt;
&lt;div class="checkbox"&gt;
    &lt;label&gt;
        &lt;input 
            type="checkbox" 
            ng-model="ctx.includeColumnHeader"&gt; 
        Include Column Header
    &lt;/label&gt;
&lt;/div&gt;
						</div>
					</app-tab-pane>
					<app-tab-pane title="JS">
						<div class="pane-content">
$scope.exportExcel = function () {
    var result = wijmo.grid.ExcelConverter.export(
        $scope.ctx.flexGrid, 
        { includeColumnHeader: $scope.ctx.includeColumnHeader }
     );

     if (navigator.msSaveBlob) {
        // Saving the xlsx file using Blob and msSaveBlob in IE.
        var blob = new Blob([result.base64Array]);

        navigator.msSaveBlob(blob, $('#export').attr("download"));
    } else {
        $('#export')[0].href = result.href();
    }
};
						</div>
					</app-tab-pane>
				</app-tab>
			</div>
		</div>
		<h2>Adding it to your application</h2>
		<p>To add Excel import or export support to your application, follow these steps:</p>
		<ol>
			<li>Add the c1xlsx.js and ExcelConverter.ts (or .js) files from this sample 
                to your application.</li>
			<li>In the HTML page, add references to the following files.
				<ul>
					<li>the jszip.js library that you can find in the following CDN:
                        <br />
                        http://cdnjs.cloudflare.com/ajax/libs/jszip/2.2.1/jszip.min.js </li>
					<li>c1xlsx.js </li>
					<li>ExcelConverter.ts (or .js)</li>
				</ul>
			</li>
			<li>Add the code from the basicController.exportExcel function (on the JS tab in 
                the Export code) that saves the export results to a local file.</li>
			<li>Add the code from the basicController.importExcel function (on the JS tab in 
                the Import code) that reads an Excel file from disk.</li>
		</ol>
	</div>
</body>
</html>
